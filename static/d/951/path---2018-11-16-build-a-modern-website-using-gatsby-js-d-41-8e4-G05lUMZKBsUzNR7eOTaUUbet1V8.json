{"data":{"content":{"edges":[{"node":{"id":"d61c88f9-6dfe-5b34-ac96-6775b821e444","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>如果你熟悉申請大學流程的話，你也可以理解 JavaScript 的 filter 方法。相對於 JavaScript 裡面的 map() 和 reduce() 方法來說，filter() 方法也許是最一目了然的方法。</p>\n<blockquote>\n<ul>\n<li>原文地址：<a href=\"https://codeburst.io/javascripts-filter-function-explained-by-applying-to-college-a21bceeba041\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript’s Filter Function Explained By Applying To College</a></li>\n<li>原文作者：<a href=\"https://codeburst.io/@kevink?source=post_header_lockup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kevin Kononenko</a></li>\n<li>譯文出自：<a href=\"https://github.com/xitu/gold-miner\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">掘金翻譯計劃</a></li>\n<li>本文永久鏈接：<a href=\"https://github.com/xitu/gold-miner/blob/master/TODO1/javascripts-filter-function-explained-by-applying-to-college.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/xitu/gold-miner/blob/master/TODO1/javascripts-filter-function-explained-by-applying-to-college.md</a></li>\n<li>譯者： <a href=\"https://calpa.me\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Calpa</a></li>\n<li>校對者：<a href=\"https://github.com/linxuesia\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">linxuesia</a>, <a href=\"https://github.com/rydensun\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rydensun</a></li>\n</ul>\n</blockquote>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*c4dbmD3a3hDCxLXte3taTw.jpeg\"></p>\n<p>相對於 JavaScript 裡面的 map() 和 reduce() 方法來說，filter() 方法也許是最一目了然的方法。</p>\n<p><strong>你輸入一個數組，以特定方法過濾它們，並返回一個新的數組。</strong></p>\n<p>這個看起來很簡單，不過我總是想把它換成 for() 循環。因此，我選擇一種更加好的方法去理解 filter() 是如何運行的。</p>\n<p>我發現，filter 方法就類似大學入學審批官。它們用一堆的參數來決定哪些學生可以進入他們特定的學院。是的，我們希望學院都可以更加靈活，全面地考察我們過去的成就，不過在實際情況中，很多硬性數字指標例如 SAT、ACT 和 GPA 績點才是考量的決定因素。</p>\n<p>就讓我們一起探討這個流程吧。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*PWtOoSbsLMCAcXmC.png\"></p>\n<h3 id=\"使用-for-循環而不是-filter-函數\"><a href=\"#%E4%BD%BF%E7%94%A8-for-%E5%BE%AA%E7%92%B0%E8%80%8C%E4%B8%8D%E6%98%AF-filter-%E5%87%BD%E6%95%B8\" aria-label=\"使用 for 循環而不是 filter 函數 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 For 循環而不是 Filter 函數</h3>\n<p>好的，我們假設這裡有四個同學，並列出他們的名字和 GPA。有一個學院只想要擁有 3.2 GPA 以上的學生進入學院。下面是你可能的做法。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">let students = [\n  {\n    name: &quot;david&quot;,\n    GPA: 3.3\n  },\n  {\n    name: &quot;sheila&quot;,\n    GPA: 3.1\n  },\n  {\n    name: &quot;Alonzo&quot;,\n    GPA: 3.65\n  },\n  {\n    name: &quot;Mary&quot;,\n    GPA: 3.8\n  }\n]\n\nlet admitted =[];\n\nfor (let i=0; i &lt; students.length; i++){\n  if(students[i].gpa &gt; 3.2)\n    admitted.push(students[i]);\n}\n\n/*admitted = [\n  {\n    name: &quot;david&quot;,\n    GPA: 3.3\n  },\n  {\n    name: &quot;Alonzo&quot;,\n    GPA: 3.65\n  },\n  {\n    name: &quot;Mary&quot;,\n    GPA: 3.8\n  }\n];*/</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>哇！這個是一個過於復雜的例子。如果有人閱讀你的代碼，他們可能需要追踪多個數組，才意識到你的一個簡單過濾數組方法。同時，你需要仔細地追踪 <em>i</em> 來避免發生錯誤。就讓我們學習如何利用 filter 方法來達到相同效果吧。</p>\n<h3 id=\"使用-filter-方法\"><a href=\"#%E4%BD%BF%E7%94%A8-filter-%E6%96%B9%E6%B3%95\" aria-label=\"使用 filter 方法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 Filter() 方法</h3>\n<p>就讓我們使用 filter() 方法來達到相同效果吧。</p>\n<ol>\n<li>Filter 是一個數組方法，所以我們會從學生數組開始。</li>\n<li>對於每一個數組裡面的元素，它會調用一個回調（callback）方法。</li>\n<li>它用 return 來聲明哪些元素會出現在最終的數組裡面，也就是被錄取的學生。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">let students = [\n  {\n    name: &quot;david&quot;,\n    GPA: 3.3\n  },\n  {\n    name: &quot;sheila&quot;,\n    GPA: 3.1\n  },\n  {\n    name: &quot;Alonzo&quot;,\n    GPA: 3.65\n  },\n  {\n    name: &quot;Mary&quot;,\n    GPA: 3.8\n  }\n]\n\nlet admitted = students.filter(function(student){\n   return student.GPA &gt; 3.2;\n})\n\n/*admitted = [\n  {\n    name: &quot;david&quot;,\n    GPA: 3.3\n  },\n  {\n    name: &quot;Alonzo&quot;,\n    GPA: 3.65\n  },\n  {\n    name: &quot;Mary&quot;,\n    GPA: 3.8\n  }\n];*/</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>輸入和輸出都是一樣的，這裡是我們做法不一樣的地方：</p>\n<ol>\n<li>我們不需要定義一個 admitted 數組，然後填充它。我們可以在同一個代碼塊裡面同時定義，並填充它的元素。</li>\n<li>我們實際上是在 return 語句中使用了一個條件判斷式！這代表我們只需要返回那些符合條件的元素。</li>\n<li>我們現在可以用 <em>student</em> 而不是在 <em>for</em> 循環裡面的 student[i] 來循環每個數組裡面的元素，</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*0TEOSb8MRGdi_lDb\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*oV583nYxvCID3r_G\"></p>\n<p>你可能注意到一件事，與直覺相反 — 我們只會在最後一步獲得錄取資格，不過在我們的代碼裡面，變量 <em>admitted</em> 是首先出現在 statement 裡面！你可能會預期在這個函數的最後去尋找最終的數組。取而代之，我們用返回來表示哪個元素會結束在 <em>admitted</em>。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*VvRQ32vesw8bJsn3\"></p>\n<h3 id=\"例子-2--在-filter-裡面用兩個條件判斷式\"><a href=\"#%E4%BE%8B%E5%AD%90-2--%E5%9C%A8-filter-%E8%A3%A1%E9%9D%A2%E7%94%A8%E5%85%A9%E5%80%8B%E6%A2%9D%E4%BB%B6%E5%88%A4%E6%96%B7%E5%BC%8F\" aria-label=\"例子 2  在 filter 裡面用兩個條件判斷式 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例子 2 — 在 Filter 裡面用兩個條件判斷式</h3>\n<p>直至現在，在我們的 filter 方法內，我們只用了一個條件判斷式。不過這並不代表全部的大學入學流程！通常，入學審查官會觀察超過 10 個因素。</p>\n<p>讓我們看一下這兩個因素 — GPA 和 SAT 分數。學生必須擁有 GPA 績點超過 3.2 及 SAT 分數超過 1900。下面是函數應該出現的樣子。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">let students = [\n  {\n    name: &quot;david&quot;,\n    GPA: 3.3,\n    SAT: 2000\n  },\n  {\n    name: &quot;sheila&quot;,\n    GPA: 3.1,\n    SAT: 1600\n  },\n  {\n    name: &quot;Alonzo&quot;,\n    GPA: 3.65,\n    SAT: 1700\n  },\n  {\n    name: &quot;Mary&quot;,\n    GPA: 3.8,\n    SAT: 2100\n  }\n]\n\nlet admitted = students.filter(function(student){\n   return student.GPA &gt; 3.2 &amp;&amp; student.SAT &gt; 1900;\n})\n\n/*admitted = [\n  {\n    name: &quot;david&quot;,\n    GPA: 3.3,\n    SAT: 2000\n  },\n  {\n    name: &quot;Mary&quot;,\n    GPA: 3.8,\n    SAT: 2100\n  }\n];*/</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>看起來很像，對吧？現在我們有兩個條件判斷式在 <em>return</em> statement 裡面。讓我們把這段代碼再拆分一下。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">let admitted = students.filter(function(student){\n   let goodStudent = student.GPA &gt; 3.2 &amp;&amp; student.SAT &gt; 1900\n   return goodStudent;\n})</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>啊！所以與 <em>for</em> 循環相比的話，這裡就是另外一個重要的差異處。如果你觀察一下 goodStudent 變量的話，就會發現它只會得出 true 或者是 false 值，然後，這個布爾值被賦值給返回語句。</p>\n<p>所以， <em>true</em> 或者 false 真的決定了，原始數組裡面每個的元素是包含還是排除，然後放到結果的數組， <em>admitted</em>。</p>\n<p><img src=\"https://i.imgur.com/tuTtqkw.jpg\"></p>\n<p><img src=\"https://i.imgur.com/bDclEiu.jpg\"></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2018/09/17/javascripts-filter-function-explained-by-applying-to-college/#%E5%89%8D%E8%A8%80\">前言</a></p>\n<ul>\n<li><a href=\"/2018/09/17/javascripts-filter-function-explained-by-applying-to-college/#%E4%BD%BF%E7%94%A8-for-%E5%BE%AA%E7%92%B0%E8%80%8C%E4%B8%8D%E6%98%AF-filter-%E5%87%BD%E6%95%B8\">使用 For 循環而不是 Filter 函數</a></li>\n<li><a href=\"/2018/09/17/javascripts-filter-function-explained-by-applying-to-college/#%E4%BD%BF%E7%94%A8-filter-%E6%96%B9%E6%B3%95\">使用 Filter() 方法</a></li>\n<li><a href=\"/2018/09/17/javascripts-filter-function-explained-by-applying-to-college/#%E4%BE%8B%E5%AD%90-2--%E5%9C%A8-filter-%E8%A3%A1%E9%9D%A2%E7%94%A8%E5%85%A9%E5%80%8B%E6%A2%9D%E4%BB%B6%E5%88%A4%E6%96%B7%E5%BC%8F\">例子 2 — 在 Filter 裡面用兩個條件判斷式</a></li>\n</ul>\n</li>\n</ul>","excerpt":"前言如果你熟悉申請大學流程的話，你也可以理解 JavaScript 的 filter 方法。相對於 JavaScript 裡面的 map() 和 reduce() 方法來說，filter() 方法也許是最一目了然的方法。原文地址：JavaScript’s Filter…","fields":{"slug":"/2018/09/17/javascripts-filter-function-explained-by-applying-to-college/"},"frontmatter":{"id":"20180917a","title":"【譯】以申請大學流程來解釋 JavaScript 的 filter 方法","slug":"/2018/09/17/javascripts-filter-function-explained-by-applying-to-college/","date":"2018-09-17T03:48:03.125Z","headerImage":null}},"previous":null,"next":null}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"67158b7f-e9aa-5079-acb5-1586cb0806d5","index":10}}