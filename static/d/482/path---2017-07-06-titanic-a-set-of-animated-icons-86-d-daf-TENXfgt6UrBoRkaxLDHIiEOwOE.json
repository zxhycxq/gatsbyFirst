{"data":{"content":{"edges":[{"node":{"id":"2de9bf6d-bfc1-51e9-babb-777e12caacc7","html":"<p>每一種編程語言都有數據結構，但他們各有不同之處。JavaScript 是一種動態語言，變數的類型不用提前聲明，你可以使用同一個變數來保存不同的數據類型。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String type</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Number type</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Boolean type</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>這就和 Python 的寫法差不多:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">'apple'</span> <span class=\"token operator\">//</span> String <span class=\"token builtin\">type</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">42</span> <span class=\"token operator\">//</span> Number <span class=\"token builtin\">type</span>\na <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token operator\">//</span> Boolean <span class=\"token builtin\">type</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"數據類型\"><a href=\"#%E6%95%B8%E6%93%9A%E9%A1%9E%E5%9E%8B\" aria-label=\"數據類型 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>數據類型</h2>\n<p><a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECMAScript 標準</a>明確定義了 7 種數據類型：6 種原始類型 (Primitive value) 和 Object。</p>\n<p>{% img /img/javascript-data-structures.svg 300 auto JavaScript Data Structure %}</p>\n<p>原始數據類型：</p>\n<ol>\n<li>Undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Symbol (ECMAScript 2015)</li>\n</ol>\n<h2 id=\"判斷方法\"><a href=\"#%E5%88%A4%E6%96%B7%E6%96%B9%E6%B3%95\" aria-label=\"判斷方法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>判斷方法</h2>\n<p>我們可以透過使用<code class=\"language-text\">typeof</code>和<code class=\"language-text\">Object.prototype.toString()</code>來判斷數據類型。</p>\n<h3 id=\"typeof\"><a href=\"#typeof\" aria-label=\"typeof permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof</h3>\n<p>在 JavaScript 誕生之時，數值是由一個標籤以及實際數據值表示的。基本類型的標籤是 1，而對象類型的標籤是 0。</p>\n<p>由於 null 代表的是空指針(全部都是 0)，null 的類型標籤會是 0。如果你在 console 直接輸入<code class=\"language-text\">typeof null</code>的話，就會得到 \"object\" 的結果，雖然這不是我們想要的值。。。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\n<span class=\"token keyword\">typeof</span> Boolean<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \"function\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \"boolean\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"number\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \"string\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"symbol\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我們可以看一下 ECMAScript 是怎樣定義 typeof 的：</p>\n<ol>\n<li>Let val be the result of evaluating UnaryExpression.</li>\n<li>If Type(val) is Reference, then\na. If IsUnresolvableReference(val) is true, return \"undefined\".</li>\n<li>Set val to ? GetValue(val).</li>\n<li>Return a String according to Table 35.</li>\n</ol>\n<p>Table 35: typeof Operator Results</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">val 的類型</th>\n<th align=\"left\">結果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Item One</td>\n<td align=\"left\">Item Two</td>\n</tr>\n<tr>\n<td align=\"left\">Type of val</td>\n<td align=\"left\">Result</td>\n</tr>\n<tr>\n<td align=\"left\">Undefined</td>\n<td align=\"left\">\"undefined\"</td>\n</tr>\n<tr>\n<td align=\"left\">Null</td>\n<td align=\"left\">\"object\"</td>\n</tr>\n<tr>\n<td align=\"left\">Boolean</td>\n<td align=\"left\">\"boolean\"</td>\n</tr>\n<tr>\n<td align=\"left\">Number</td>\n<td align=\"left\">\"number\"</td>\n</tr>\n<tr>\n<td align=\"left\">String</td>\n<td align=\"left\">\"string\"</td>\n</tr>\n<tr>\n<td align=\"left\">Symbol</td>\n<td align=\"left\">\"symbol\"</td>\n</tr>\n<tr>\n<td align=\"left\">Object (ordinary and does not implement [[Call]])</td>\n<td align=\"left\">\"object\"</td>\n</tr>\n<tr>\n<td align=\"left\">Object (standard exotic and does not implement [[Call]])</td>\n<td align=\"left\">\"object\"</td>\n</tr>\n<tr>\n<td align=\"left\">Object (implements [[Call]])</td>\n<td align=\"left\">\"function\"</td>\n</tr>\n<tr>\n<td align=\"left\">Object (non-standard exotic and does not implement [[Call]])</td>\n<td align=\"left\">Implementation-defined. Must not be \"undefined\", \"boolean\", \"function\", \"number\", \"symbol\", or \"string\".</td>\n</tr>\n</tbody>\n</table>\n<p>另外，如果直接用<code class=\"language-text\">typeof</code>來判斷 NaN 的話，它會返回<code class=\"language-text\">&quot;number&quot;</code>，對於 NaN 我們可以用<code class=\"language-text\">isNaN</code>方法來判斷是否一個數字。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3 id=\"objectprototypetostring\"><a href=\"#objectprototypetostring\" aria-label=\"objectprototypetostring permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.prototype.toString()</h3>\n<p>我們可以利用<code class=\"language-text\">Object.prototype.toString.call()</code>或者<code class=\"language-text\">Object.prototype.toString.apply()</code>這兩個方法判斷 Object 的類型，以及 null：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \"[object Undefined]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"[object Date]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"[object Math]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"[object Null]\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ECMAScript 19.1.3.6 明確定義 Object.prototype.toString()：</p>\n<ol>\n<li>If the <code class=\"language-text\">this</code> value is <code class=\"language-text\">undefined</code>, return <code class=\"language-text\">&quot;[object Undefined]&quot;</code>.</li>\n<li>If the <code class=\"language-text\">this</code> value is <code class=\"language-text\">null</code>, return <code class=\"language-text\">&quot;[object Null]&quot;</code>.</li>\n<li>Let <code class=\"language-text\">O</code> be ! <a href=\"https://tc39.github.io/ecma262/#sec-toobject\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ToObject</a>(<code class=\"language-text\">this</code> value).</li>\n<li>Let <code class=\"language-text\">isArray</code> be ? <a href=\"https://tc39.github.io/ecma262/#sec-isarray\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IsArray</a>(<code class=\"language-text\">O</code>).</li>\n<li>If <code class=\"language-text\">isArray</code> is <code class=\"language-text\">true</code>, let <code class=\"language-text\">builtinTag</code> be <code class=\"language-text\">&quot;Array&quot;</code>.</li>\n<li>Else if <code class=\"language-text\">O</code> is a String exotic object, let <code class=\"language-text\">builtinTag</code> be <code class=\"language-text\">&quot;String&quot;</code>.</li>\n<li>Else if <code class=\"language-text\">O</code> has a [[ParameterMap]] internal slot, let <code class=\"language-text\">builtinTag</code> be <code class=\"language-text\">&quot;Arguments&quot;</code>.</li>\n<li>Else if <code class=\"language-text\">O</code> has a [[Call]] internal method, let <code class=\"language-text\">builtinTag</code> be <code class=\"language-text\">&quot;Function&quot;</code>.</li>\n<li>Else if <code class=\"language-text\">O</code> has an [[ErrorData]] internal slot, let <code class=\"language-text\">builtinTag</code> be <code class=\"language-text\">&quot;Error&quot;</code>.</li>\n<li>Else if <code class=\"language-text\">O</code> has a [[BooleanData]] internal slot, let <code class=\"language-text\">builtinTag</code> be <code class=\"language-text\">&quot;Boolean&quot;</code>.</li>\n<li>Else if <code class=\"language-text\">O</code> has a [[NumberData]] internal slot, let <code class=\"language-text\">builtinTag</code> be <code class=\"language-text\">&quot;Number&quot;</code>.</li>\n<li>Else if <code class=\"language-text\">O</code> has a [[DateValue]] internal slot, let <code class=\"language-text\">builtinTag</code> be <code class=\"language-text\">&quot;Date&quot;</code>.</li>\n<li>Else if <code class=\"language-text\">O</code> has a [[RegExpMatcher]] internal slot, let <code class=\"language-text\">builtinTag</code> be <code class=\"language-text\">&quot;RegExp&quot;</code>.</li>\n<li>Else, let <code class=\"language-text\">builtinTag</code> be <code class=\"language-text\">&quot;Object&quot;</code>.</li>\n<li>Let <code class=\"language-text\">tag</code> be ? <a href=\"https://tc39.github.io/ecma262/#sec-get-o-p\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get</a>(<code class=\"language-text\">O</code>, @@toStringTag).</li>\n<li>If <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Type</a>(<code class=\"language-text\">tag</code>) is not String, let <code class=\"language-text\">tag</code> be <code class=\"language-text\">builtinTag</code>.</li>\n<li>Return the String that is the result of concatenating <code class=\"language-text\">&quot;[object &quot;</code>, <code class=\"language-text\">tag</code>, and <code class=\"language-text\">&quot;]&quot;</code>.</li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h2>\n<ol>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECMAScript® 2018 Language Specification</a></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"/2017/05/18/javascript-data-structures-in-deep/#%E6%95%B8%E6%93%9A%E9%A1%9E%E5%9E%8B\">數據類型</a></li>\n<li>\n<p><a href=\"/2017/05/18/javascript-data-structures-in-deep/#%E5%88%A4%E6%96%B7%E6%96%B9%E6%B3%95\">判斷方法</a></p>\n<ul>\n<li><a href=\"/2017/05/18/javascript-data-structures-in-deep/#typeof\">typeof</a></li>\n<li><a href=\"/2017/05/18/javascript-data-structures-in-deep/#objectprototypetostring\">Object.prototype.toString()</a></li>\n</ul>\n</li>\n<li><a href=\"/2017/05/18/javascript-data-structures-in-deep/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>","excerpt":"每一種編程語言都有數據結構，但他們各有不同之處。JavaScript 是一種動態語言，變數的類型不用提前聲明，你可以使用同一個變數來保存不同的數據類型。這就和 Python 的寫法差不多:數據類型ECMAScript 標準明確定義了 7 種數據類型：…","fields":{"slug":"/2017/05/18/javascript-data-structures-in-deep/"},"frontmatter":{"id":"20170518a","title":"深入 ECMAScript 的數據類型","slug":"/2017/05/18/javascript-data-structures-in-deep/","date":"2017-05-18T03:48:03.125Z","headerImage":null}},"previous":null,"next":null}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"2ae0e8fc-740f-5aef-8b06-87564bfde23d","index":31}}